   Compiling popper_parser v0.1.0 (/Users/antoine/Documents/popper-lang/crates/popper_parser)
error: failed to run custom build command for `popper_parser v0.1.0 (/Users/antoine/Documents/popper-lang/crates/popper_parser)`

Caused by:
  process didn't exit successfully: `/Users/antoine/Documents/popper-lang/crates/popper_parser/target/debug/build/popper_parser-4630d3d33d7680c9/build-script-build` (exit status: 1)
  --- stdout
  processing file `/Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop`
  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:293:5: 298:0: Local ambiguity detected

    The problem arises after having observed the following symbols in the input:
      Expr OpTerm Ident
    At that point, if the next token is a `"@"`, then the parser can proceed in two different ways.

    First, the parser could execute the production at
    /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:293:5: 298:0, which would consume
    the top 1 token(s) from the stack and produce a `ExprIdent`. This might then yield a parse tree like
      "while"  Ident        ╷ Statement
      │        ├─ExprIdent──┤         │
      │        ├─Term───────┤         │
      │        ├─ParenGroup─┤         │
      │        ├─Call───────┤         │
      │        ├─Factor─────┤         │
      │        └─Expr───────┘         │
      └─ConditionalStatement<"while">─┘

    Alternatively, the parser could shift the `"@"` token and later use it to construct a `CallSyntax`. This might
    then yield a parse tree like
      Expr OpTerm Ident "@" Comma<Term> "@"
      │           ├─CallSyntax────────────┤
      │           ├─Span<CallSyntax>──────┤
      │           ├─CallExpr──────────────┤
      │           ├─Call──────────────────┤
      │           └─Factor────────────────┤
      └─BinOp<Expr, OpTerm, Factor>───────┘

    See the LALRPOP manual for advice on making your grammar LR(1).

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"("` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"@"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"false"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"func"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"if"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"let"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"true"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"while"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"{"` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `r#"\"(\\\\.|[^\"])*\""#` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `r#"[0-9]+"#` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:350:5: 351:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = (*) Expr OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = (*) Factor OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BlockStmt = (*) Group<"{", Statement*, "}"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"false"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Bool = (*) Span<"true"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) CallExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Call = (*) ParenGroup ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallExpr = (*) Span<CallSyntax> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) Ident "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    CallSyntax = (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Chars = (*) r#"[a-zA-Z_][a-zA-Z0-9_]*"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"if"> = (*) "if" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ConditionalStatement<"while"> = (*) "while" Expr Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) BinOp<Expr, OpTerm, Factor> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Expr = (*) Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = (*) Ident ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) BinOp<Factor, OpFactor, Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Factor = (*) Call ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    File = Statement+ (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Function = (*) Span<FunctionStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    FunctionStmt = (*) "func" Span<Ident> Group<"(", Arguments, ")"> ":" Types Block ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"(", Expr, ")"> = (*) "(" Expr ")" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" Statement+ "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Group<"{", Statement*, "}"> = (*) "{" "}" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Ident = (*) Span<Chars> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    If = (*) Span<ConditionalStatement<"if">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Int = (*) Span<Num> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Let = (*) Span<LetStmt> ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = (*) "let" TypeDecl "=" Expr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Num = (*) r#"[0-9]+"# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) ParenGroupExpr ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroup = (*) Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ParenGroupExpr = (*) Group<"(", Expr, ")"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"false"> = (*) "false" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<"true"> = (*) "true" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<CallSyntax> = (*) CallSyntax ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Chars> = (*) Chars ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"if">> = (*) ConditionalStatement<"if"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<ConditionalStatement<"while">> = (*) ConditionalStatement<"while"> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<FunctionStmt> = (*) FunctionStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<LetStmt> = (*) LetStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Num> = (*) Num ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Span<Str> = (*) Str ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) BlockStmt ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Expr ";" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Function ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) If ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) Let ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement = (*) While ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Statement+ = Statement+ (*) Statement ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Str = (*) r#"\"(\\\\.|[^\"])*\""# ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    String = (*) Span<Str> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Bool ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) ExprIdent ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) Int ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Term = (*) String ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    While = (*) Span<ConditionalStatement<"while">> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `r#"[a-zA-Z_][a-zA-Z0-9_]*"#` we can reduce to a `File` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:189:27: 189:37: Conflict detected

      when in this state:
    Comma<Term> = Term (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Comma<Term> = Term (*) "," Comma<Term> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<Term>` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:210:5: 210:31: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = Expr OpTerm Factor (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = Factor (*) OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpFactor = (*) "*" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpFactor = (*) "/" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"*"` we can reduce to a `BinOp<Expr, OpTerm, Factor>` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:210:5: 210:31: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = Expr OpTerm Factor (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    BinOp<Factor, OpFactor, Term> = Factor (*) OpFactor Term ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpFactor = (*) "*" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpFactor = (*) "/" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"/"` we can reduce to a `BinOp<Expr, OpTerm, Factor>` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:254:16: 254:34: Conflict detected

      when in this state:
    Comma<ArgumentStmt> = ArgumentStmt (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Comma<ArgumentStmt> = ArgumentStmt (*) "," Comma<ArgumentStmt> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<ArgumentStmt>` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:112:5: 118:0: Conflict detected

      when in this state:
    GenericTypes = Types (*) "<" Comma<Types> ">" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    TypeDecl = Ident ":" Types (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"<"` we can reduce to a `TypeDecl` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:121:5: 124:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = Expr (*) OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = "let" TypeDecl "=" Expr (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpTerm = (*) "+" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpTerm = (*) "-" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"+"` we can reduce to a `LetStmt` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:121:5: 124:0: Conflict detected

      when in this state:
    BinOp<Expr, OpTerm, Factor> = Expr (*) OpTerm Factor ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    LetStmt = "let" TypeDecl "=" Expr (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpTerm = (*) "+" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    OpTerm = (*) "-" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"-"` we can reduce to a `LetStmt` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:238:5: 241:0: Conflict detected

      when in this state:
    Argument = Ident ":" Types (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    GenericTypes = Types (*) "<" Comma<Types> ">" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"<"` we can reduce to a `Argument` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:94:23: 94:34: Conflict detected

      when in this state:
    Comma<Types> = Types (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Comma<Types> = Types (*) "," Comma<Types> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    GenericTypes = Types (*) "<" Comma<Types> ">" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `","` we can reduce to a `Comma<Types>` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:94:23: 94:34: Conflict detected

      when in this state:
    Comma<Types> = Types (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    Comma<Types> = Types (*) "," Comma<Types> ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    GenericTypes = Types (*) "<" Comma<Types> ">" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"<"` we can reduce to a `Comma<Types>` but we can also shift

  /Users/antoine/Documents/popper-lang/crates/popper_parser/src/popper.lalrpop:293:5: 298:0: Conflict detected

      when in this state:
    CallSyntax = Ident (*) "@" Comma<Term> "@" ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]
    ExprIdent = Ident (*) ["(", ")", "*", "+", ",", "-", "/", ":", ";", "<", "=", ">", "@", "bool", "else", "false", "func", "if", "int", "let", "string", "true", "unit", "while", "{", "}", r#"\"(\\\\.|[^\"])*\""#, r#"[0-9]+"#, r#"[a-zA-Z_][a-zA-Z0-9_]*"#, Eof]

    and looking at a token `"@"` we can reduce to a `ExprIdent` but we can also shift

